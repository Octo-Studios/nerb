plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "${mod_id}-common.mixins.json"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'MinecraftForge'
        url = 'https://maven.neoforged.net/releases/'
    }
}

dependencies {
    forge "net.neoforged:forge:$rootProject.minecraft_version-$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    modImplementation "it.hurts.octostudios.octolib:octolib-forge:$rootProject.octolib_version"

    modImplementation "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems-forge:${rei_version}"
    modImplementation "dev.emi:emi-forge:${emi_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        mod_version: mod_version, mod_group: mod_group, mod_name: mod_name,
        mod_id     : mod_id, mod_description: mod_description, mod_authors: mod_authors,
        mod_license: mod_license, mod_tracker: mod_tracker
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile

    atAccessWideners.add("${rootProject.properties.mod_id}.accesswidener")
}
