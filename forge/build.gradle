plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "nerb-common.mixins.json"
        mixinConfig "nerb.mixins.json"
    }
}

configurations {
    common
    forgeLike
    shadowCommon
    compileClasspath.extendsFrom common, forgeLike
    runtimeClasspath.extendsFrom common, forgeLike
    developmentForge.extendsFrom common
    developmentForgeLike.extendsFrom forgeLike
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

repositories {
    maven { url "https://maven.minecraftforge.net/releases/" }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        mod_id     : mod_id, mod_name: mod_name,
        mod_version: mod_version, mod_authors: mod_authors
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-" + loom.platform.get().name()
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar

    archiveClassifier = loom.platform.get().name()
}

jar {
    archiveClassifier = "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}