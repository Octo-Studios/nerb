plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation "it.hurts.octostudios.octolib:octolib-fabric:$rootProject.octolib_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

def resourceTargets = ['fabric.mod.json']
def replaceProperties = [
        mod_version: mod_version, mod_group: mod_group, mod_name: mod_name,
        mod_id     : mod_id, mod_description: mod_description, mod_authors: mod_authors,
        mod_license: mod_license, mod_tracker: mod_tracker
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
