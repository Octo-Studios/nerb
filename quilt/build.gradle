plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilt_fabric_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionQuilt')
}

def resourceTargets = ['quilt.mod.json']
def replaceProperties = [
        mod_id     : mod_id, mod_name: mod_name,
        mod_version: mod_version, mod_authors: mod_authors
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-" + loom.platform.get().name()
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = loom.platform.get().name()
}

jar {
    archiveClassifier = "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}